/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.Assert.*;

public class LibraryTest {

    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;
    private final PrintStream originalErr = System.err;

    @Before
    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
        System.setErr(new PrintStream(errContent));
    }

    @After
    public void restoreStreams() {
        System.setOut(originalOut);
        System.setErr(originalErr);
    }

    @Test
    public void testRoll() {
        int n = 4;
        assertEquals("roll should create an array that is 'n' rolls in length", n, Library.roll(4).length);
    }

    @Test
    public void testContainsDuplicates() {
        int[] array = { 1, 2, 2, 4};
        assertTrue("containsDuplicates should return 'true' if an array contains duplicate", Library.containsDuplicates(array));
    }

    @Test
    public void testCalculateAverages() {
        int[][] monthTempsByWeek = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        testArray = {65, 56, 55, 52, 55, 62, 57};
        assertArrayEquals("calculatesAverages should return the array with the lowest average temperature", testArray, Library.calculateAverages(monthTempsByWeek));
    }

    @Test
    public void test testminMaxTempArray() {
        int[][] monthTempsByWeek = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
       int[] highLow = { 72, 51 };
        assertArrayEquals("minMaxTampArray should return a min and a max temperature for the hashset", highLow, minMaxTempArray())
    }

}

